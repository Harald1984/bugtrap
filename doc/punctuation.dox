/**
   \page page1  Punctuation errors that kill


The saying goes
<blockquote>
To err is human, to forgive is devine
</blockquote>
but computers are not human, and users are not devine, 
so never expect to get away with bugs. 
To make things worse 
the 
general public even ignores the fact that 
computer systems are human made.

\section Mariner Mariner 1

Even the smallest human error can have catastrophic
consequences in computer software. 
In the Mariner program NASA launched a series of robotic 
interplanetary probes designed to investigate Mars, Venus,
and Mercury. 
In 1962 the Mariner 1 spacecraft failed
during take-off 
due to 
a software bug \cite Clarke:Promise.
During transcription from <i>hand-written</i>
formulae, the writer of the specification document for the
guidance software
missed the superscript bar in 
\f$\bar{\dot{r}}_n\f$. Without the averaging 
indicated by the bar, the steering program tried 
to correct for every minor velocity variation. 
All the spurious corrections sent the rocket off course \cite Neumann:RD89.

\section Mercury Project Mercury Fortran error


The Project Mercury 
was the United States' first man-in-space program.
In the Mercury project, writing 
\code{.f66}
DO 17 I = 1. 10 
\endcode
instead of
\code{.f66}
DO 17 I = 1, 10
\endcode
in the Fortran   code of an orbit calculation program 
could have caused another disaster had not the error
been detected in time. To the eye, the difference is just 
a matter of comma or period, perhaps just a pixel of
difference on the computer screen, but to the compiler 
it is the difference between a variable assignment 
`DO 17 I=1.10` or 
a loop over 10 index values. Deep inside a critical 
software package, such punctuation errors
could have fatal consequences. Fortunately, this particular error was
fixed before causing any harm.


\section Phobos Project Phobos 1

In September 1988 the Russian Phobos 1 
Mars orbiter was 
lost due to systsem shutdown caused by
an error in a software command uploaded in the begginning of the month.
The proofreading software was malfunctioning at the time,
so the operator transmitted the command without proofreading.
As a result, the spacecraft received an end-of-mission command \cite HM:RPE.


\section Ariane Ariane 5 

On June 4th 1996 an Ariane 5  rocket crashed due to 
a data conversion from a 64-bit 
floating point to 16-bit signed integer value which lead to
arithmetic  overflow \cite Ariene5:Flight501Failure
and ultimately to total 
loss of guidance and altitude information. 
The rocket and its cargo were valued at \$~500 millions. 


\section Patriot Patriot missile

Computer errors have also caused loss of lives. 
One example occured in February 1991 when a Patriot missile
struck an American Army barracks, killing 28 
soldiers and injuring around 100 other people.
The cause has been traced back to accumulation of 
arithmetic errors in time 
calculations \cite Skeel:RoundoffErrorPatriot.
Mutiplying the internal clock time in
tenths of seconds by 0.10 s/(tenths of s) 
to obtain seconds failed
because of a truncation error.
The problem is that while 
0.1 has a finite decimal expansion, the expansion 
in binary numbers is infinite. In the 24 bit 
register of the Patriot,  the error 
is about 0.000000095 s/(tenths of s).
After 100 hours up time, the internal clock had ticked
\f\[
100 \;\text{h} \times 
60 \;\text{min/h} 
\times 60 \;\text{s/min} \times 
10 \;\text{(tenths of s)/s} = 3600000 \;\text{tenths of s}.
\f\]
After this time the 
error had accumulated to
\f\[ 
3600000 \;\text{tenths of s} \times 
0.000000095 \; \text{s/(tenths of s)}= 0.34\;\text{s}.
\f\] 
This is enough time for the missile to travel more 
than half a kilometre and certainly enough 
to hit the wrong target.

\section Sleipner Sleipner A disaster

In August 1991 the Sleipner A oil and gas
platform sank after one of the cell 
walls in the supporting shafts sprang leak.
The accident was ultimately caused by
serious errors in a finite element analysis software\cite SleipnerA:JR.
The calculations 
underestimated 
the shear stresses by 47% in the walls of the 
supporting base cells \cite SleipnerA:Arnold.
Sixteen lives were lost 
and the material loss was estimated to  \$700 millions.

\section Lesser Less serious failures


While not every computer error 
leads to catastrophic effects, I am sure you 
have experienced
irritating computer failures which have cost 
you time and money. For developers it is particularly 
annoying when your own code fail to work due 
to bugs in legacy code. Debugging and patching 
unfamiliar code 
is both time-consuming and risky, and may 
even lead to introduction of new bugs. 
Hence, it is in everyone's interest 
that software developers focus more on 
robustness and correctness and employ methods 
to reduce the risk of bugs to a minimum.


*/
