/**
   \page page5 Testable code



<blockquote>
The criterion of the scientific status of a theory
is its falsifiability, or refutability, or testability.
<div id="author">
Karl Popper
</div>
</blockquote>



\section OneResponsibility One class, one responsibility

For code to be testable in practice,
it has to be designed with testability in mind. 
For the most fundamental building blocks,
like the `class Circle`,
there are no dependency on other units, and unit testing is
relatively straightforward.

Yet, if full test-coverage is required in parameter space,
the combinatorical explosion as discussed in \ref GoodUnitTests
must be avoided. The key point is to divide functionality
into simple classes and functions with as few parameters as possible.
The <em>single responsibility principle</em> is a useful guideline
in this respect: every class or module should have responsibility
over a single part of functionality. As soon as you have to use the word
<span class="quote">and</span> when describing the action of a class,
the alarm shoud go off.
It is a sign of mixing of concerns.

This principle leads to a large number of simple classes,
and sometimes people will complain about the number of classes in the code. To this I say, it is better to have a linearly growing number of simple classes
than the combinatorical explosion of complexity in a few god classes.

\section DependencyInjection Inject the dependencies

For classes representing aggregates of several other
classes things become less straightforward.
A few steps above the most fundamental building blocks,
the number of dependencies grow exponentially.
Faced with the need to set up myraids of helper classes and mockups,
which have to be changed each time their interfaces change,
developers give up on unit testing and decide
to rely on system tests, only. This problem can be
mitigated if one follows the principle of
dependency injection.
Look at the
`class MorganPlus8`.
It is derived from the general `class ICar` interface.
Many of the car functionalities needs an engine to be carried out. In software
one could inject the engine depedency through the car constructor,
or through a set function,
so that the car functionality could be tested with a mockup engine.
However, this would require the engine to be created outside the class.
In this case one would have to ensure that the engine lives at
least as long as the car. Even worse, in many realistic classes
there would be a terribly long list of constructor arguments.
This would make the code messy and hard to maintain.

The template based solution \cite BeautifulInjection
with the `NeedsEngine` template class,
solves this problem by leaving the concrete car constructors
like the `class MorganPlus8` clean, and still allows
dependency injection of the engine into a testable implementation.
Hence the engine-dependent functionality can be tested with a mockup engine.



\section ValuesAndServieApart Keep value classes and service classes apart

Value objects are simply holders of values. They have many setters and getters
and are simple to construct. Normally, they don't even need an interface
because they never need to be mocked away. Service-objects do interesting work.
They should have interfaces since they are candidates for mocking.

A value class should never take service objects in its constructor,
and a service class should never take value objects. 


\section Polymorphism Use polymorphism instead of conditionals

Whenever the same <em>if condition</em> is repeated in a class, consider
splitting the class into smaller and
simpler classes with a common abstract base class. Testing of many
small classes
is easier than testing a few large ones. The reason is that
you avoid the dreaded combinatorical explosion.

It also makes the code easier to maintain. Admittedly you get more classes,
but adding a new variant derived from the base class will not involve touching
existing code or unit tests. In a single
class with conditionals you would have to change
a number of conditionals and modify existing unit test suite.
Thus, the single class solution grows in complexity and
for each new variant, there is a risk of introducing new bugs in existing code.



\section NoConstructorWork Don't let the constructor do work

Remember that you have to test all functions in your class.
Each test should be carried oout independently from the others.
Hence, you need a fresh instance of the class object set in
the required state before carrying out each test.
This means that the constructor must be called
before each function test in the test suite of the class.
The same holds for any other test suites
dependent on the class. For large projects the complete
test suite may become very large and time-consuming to carry out.
Especially when run with memory error detectors such as valgrind,
the testing becomes slow. Obviously, one does not want
constructor work to be carried out over and over again.
Hence, do as little work as possible in the constructor,
and preferably nothing than assigning dependencies into the fields.



\section GlobalStates Avoid global states

Variables with global scope makes software hard to understand.
They are like ghosts which can show up anywhere without
passing through visible doors or backdoors. In a magic manner they influence
code and may themselves be modified everywhere.  Global variables are
the exact opposite to the sound advice of minimizing scope of variables.


For the same reason, the use of singletons \cite GoF:DesignPatterns
should be avoided except for logging purposes and perhaps holding
configuration constants.



\section Inheritance Don't abuse inheritance


Use inheritance for related types, where each derived class
<em>is a</em> type of
base class. The derived class acquires all the properties and
behaviours of the parent class. One of the key features of
class inheritance is that a pointer to a derived class is
type-compatible with a pointer to its base class.
Polymorphism is the art of taking advantage of this powerful feature.
Virtual functions and inheritance should be used to
achieve
run-time polymorphism.


For the lazy programmer, and yes, we have to admit it,
we are all lazy, implementation inheritance looks as a cheap way of
reusing implementation from one class in another. The drawback is that
you not only inherits the functionality you need, but the whole
interface of the class. Inheritance breaks encapsulation.
In other words, a subclass depends on the implementation
details of its superclass for its proper function. Hence, this
kind of code reuse is hard to maintain. Inheritance
also makes testing more difficult, because
inherited functions are impossible to mock out.


According to the composite reuse principle
(CRP) 
one should favor delegation over inheritance as a reuse mechanism.
The price to pay are simple forwarding methods, but the bonus is that
you can control behaviour in unit tests with dependency injection.


*/