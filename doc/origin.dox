/**
   \page page2 On the origin of bugs

Think of software as a problem solver. 
For a particular problem or class of problems, the software
should give a solution. Bugs represent programming errors
leading to wrong solutions or no solution at all.
Even if the software produces the correct results,
it may violate software requirements if the results are returned too late.
Normally, slow software it just a 
nuisance, but in real-time applications slowness may be life threatening.
What if the software in your car is too slow to release the airbag in the event of a
crash?

Before we can have any hope of reducing the number and severity of 
bugs in the code we write, we need to understand why bugs exist.
Then we need to take action.

Bugs could be introduced  at any step on the way from 
recognizing that there is
a problem needing a software solution  to the 
last steps in the final implementation of the software.
There could be errors in the understanding of 
the problem to be solved, errors in the software 
specification, 
and last but not least, errors in
the implementation.
During the requirements analysis and specification stage, it is important to gather requirements to understand and
<em>document</em> what is required by users and other stakeholders. At this stage, the requirements should be expressed
as test requirements




The last errors arise 
in a multitude of ways, which we'll come back to later. 


\section PoorlyUnderstood Poorly understood problem

<blockquote>
First, solve the problem. Then, write the code.
<div id="author">
John Johnson
</div>
</blockquote>

A prerequisite to correct problem solving is to have 
a full understanding of the problem to be solved. 
This may seem obvious, but unfortunately, 
it is par for the course in the 
technology industry to try to bowl headlong into solving things even 
before we know what the problem is, or the criteria for success. 
Far too often large software projects are initiated
without even having an understanding of even the basic concepts of the problem.
More commonly the basic concepts are known, but the specification 
of the required solution is vague and lacking in testable requirements.
When the problem finally is understood, it is often too late to
correct the poor design choices made at the early confused stage.
These errors propagate into software which is hard to maintain and develop.

 

Another source of error is <em>moving target programming</em>.
The specification 
changes late in the development cycle, making it necessary to 
hack in last minute modifications. Of course small changes should be easy to
accomodate right up to code freeze, but sometimes seemingly small changes
may enforce far-reaching design changes. In such cases it is better to
take the cost up front than to make <em>ad hoc</em> hacks to get it to work.
Suck hacks are often inefficient, inelegant, or even unfathomable,
and typically produces bug-ridden code that is hard to maintain.
The later specification changes arrive, the higher is the risk of 
producing such nesting grounds for bugs.


When a group of smart people is stuck at an impasse,
it is usually because the problem is poorly posed, and not because
of lack of problem-solving ability. In such situations you have
every reason to
engange in the extremely creative 
activity of defining the problem
without falling back to the same lame problem statements 
and criteria for success. 
Only when you have a well-defined problem and testable measures of success,
the team will see the goal of the project, and since seeing is achieving,
this gives the team an incredible unifying and driving energy towards
completing the project.


\section Cryptic Cryptic code

<blockquote>
Any fool can write code that a computer can understand.
Good programmers write code that humans can understand.
<div id="author">
Martin Fowler
</div>
</blockquote>

Every programmer should remember one thing: You don't write code for 
the compiler. Sure enough you do not get anywhere before 
the compiler accepts your code, but unless you write trivial small programs,
the real users of your code will be future colleagues who get the task of 
extending and maintaining the system. If they cannot understand you code,
then perhaps you did not either. While a programmer has to be 
very precise in following the computer grammer, the content of 
the program remains free. Hence, cryptic code may indicate
poorly understood and sloppily formulated ideas. 
Even if the code works as intended, you future colleages may have 
to scrap your code and write new code (a total loss of company time and effort)
or they misunderstand it and introduce new bugs. 

In any case, you should strive to write  code 
that can be understood by other people. I often hear people claiming to write
self-documenting code. There is no such thing. Without accompanying 
documentation no code is self-explanatory. The meaning of words 
vary according to context, and the same words have different connotations for
people with different educational backgrounds. Take the word ``map''. 
It could mean a whole bunch of things; to the mathematician it could be a 
 function or a morphism, to the C++ programmer it is a class in the standard template library,
 and for others a map is just something used to find the way.



Large software projects 
often involve people from many different disiplines. You find mathematicians,
physicists, statistitians, software engineers, and system engineers 
working together on 
the same software system. Self-evident code in one disipline 
may be cryptic for another. Proper documentation and references to 
other documents may help to avoid misunderstandings.
 




\section BadFoundations Bad foundations

The Leaning Tower of Pisa is a good example of the consequences of building upon
inadequate foundations. While Pisa makes money on the tilt, it is never good
when bad foundations topple software projects. In a software project, 
the foundation is the mathematical model underlying your implementation,
the software architecture for your system, the 
compiler and the software libraries you use to develop your software system.

Your code is never more solid than the foundations upon which you build it.
hence, never trust a library that is not well tested. You risk basing your software on feet of clay.
  


\section Debuggers Relying on debuggers

Writing sloppy code and believing that the debuggers will iron out all
difficulties is like being a reckless driver hoping to be saved by
electronic stability control, the anti-lock braking system, or
in the worst case by the air bag. While debuggers are helpful in order
to find and correct bugs, they only work if somebody actually knows that the
bug exists. Sloppy programming leads to far more bugs than you ever will know.
Safety systems can save your bacon in many cases, but there are few 
foolproof systems, and programming is certainly not one of them, 
so never program like a fool.


\section Symptoms Treating symptoms instead of diseases

In medicine it is well-known that symptomatic treatment 
may be outright dangerous and that one should try to cure the cause 
of the problems and not only the symptoms. The same rule holds in programming.
Making the system pass particular tests  by <em>ad hoc</em> parameter tweaking
or by poorly understood changes to algorithms could hide the symptoms
of serious problems. This can cause bigger problems later on. Undocumented and
poorly understood tweaks also makes the program harder to maintain and less robust.
Hence, treating symptoms instead of the causes, is in itself a 
source of new problems.



\section Refactoring Refactoring

Even in a waterfall software development model, with its big design up
front approach, any non-trivial software system will suffer some degree of redesign and refactoring during its development.
Refactoring is a software restructuring which should not change the functionality. It is applied to
improve readability and thereby improve the source-code maintainability, but in the process one may discover and fix hidden bugs.
There is also the risk that refactoring in itself introduces new bugs.

*/